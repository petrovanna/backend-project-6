- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, labelName)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin textarea(entity, propertyName, errors = {}, labelName)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, labelName, errors = {}, variables, isMultiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple= isMultiple
    )&attributes(attributes)
      if !isMultiple
        option
      each variable in variables ? variables : []
        - isSelect = _.includes(selectedVariables, variable.id)
        if propertyName === 'executorId'
          option(value= variable.id selected= isSelect)= `${variable.firstName} ${variable.lastName}`
        else 
          option(value= variable.id selected= isSelect)= variable.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(propertyName, variables, labelName)
  - inputId = getInputId(propertyName)
  .mb-3.input-group
    label(
      class='input-group-text'
      for= inputId
    )= labelName
    select(
      id= inputId
      name= propertyName
      class='form-select'
    )&attributes(attributes)
      option
      each variable in variables
        if propertyName === 'executor'
          option(value= variable.id)= `${variable.firstName} ${variable.lastName}`
        else
          option(value= variable.id, selected= variable.id == query[propertyName])= variable.name


mixin checkbox(propertyName, labelName)
  - inputId = getInputId(propertyName)
  .mb-3.form-check
    input(
      id= inputId
      name= propertyName
      class='form-check-input'
      type='checkbox'
    )&attributes(attributes)
    label(
      class='form-check-label'
      for= inputId
    )= labelName